# pip install openai-agents python-dotenv
# .env: AZURE_API_KEY, AZURE_API_BASE, AZURE_API_VERSION

import os, asyncio, re, sys, json
from dotenv import load_dotenv
from agents import Agent, Runner, OpenAIResponsesModel
from agents.tool import HostedMCPTool

load_dotenv()
AZURE_API_KEY = os.getenv("AZURE_API_KEY")
AZURE_API_BASE = os.getenv("AZURE_API_BASE")
AZURE_API_VERSION = os.getenv("AZURE_API_VERSION")
if not (AZURE_API_KEY and AZURE_API_BASE and AZURE_API_VERSION):
    print("Missing Azure env vars", file=sys.stderr); sys.exit(1)

# Config
MCP_URL = "http://127.0.0.1:8000"      # or your HTTPS URL in prod
INPUT_PPTX = "input_with_tokens.pptx"  # optional
OUTPUT_PPTX = "output_filled.pptx"

# Map [Token] -> value
VALUES = {
    "ClientName": "Acme Corp",
    "Subtitle": "Q3 Growth Plan",
    "Owner": "Noura Ibrahim",
}

model = OpenAIResponsesModel(
    model="azure:gpt-4o-mini",
    api_key=AZURE_API_KEY,
    api_base=AZURE_API_BASE,
    api_version=AZURE_API_VERSION,
)

ppt = HostedMCPTool(tool_config={
    "type": "mcp",
    "server_label": "ppt",
    "server_url": MCP_URL,
    "allowed_tools": [
        "create_presentation","open_presentation","save_presentation",
        "extract_presentation_text","extract_slide_text","get_slide_info","add_slide",
        "populate_placeholder","add_bullet_points","manage_text","get_presentation_info",
    ],
    "require_approval": "never",
})

agent = Agent(
    name="PlaceholderPopulator",
    instructions=(
        "You are a precise PowerPoint editor. "
        "If a presentation path is provided, open it; otherwise create a new one. "
        "For each slide, discover placeholders or text shapes that contain [Tokens]. "
        "Replace [Token]s using the mapping provided by the user. "
        "Prefer real placeholders with populate_placeholder; otherwise edit the shape text. "
        "Finally, save the deck to the requested path."
    ),
    tools=[ppt],
    model=model,
)

async def main():
    task = (
        f"Token map (JSON): {json.dumps(VALUES)}\n"
        f"Input file (if exists): {INPUT_PPTX}\n"
        f"Output file: {OUTPUT_PPTX}\n\n"
        "Steps:\n"
        "1) If input file exists, open it; else create a new presentation and add a Title+Content slide "
        "   with sample tokens [ClientName], [Owner], [Subtitle].\n"
        "2) For each slide, locate any [Token] occurrences via get_slide_info / extract_*.\n"
        "3) Replace tokens using the map. Use populate_placeholder for true placeholders; "
        "   otherwise update shape text via manage_text (format_runs is OK).\n"
        "4) Save the presentation to the output path.\n"
        "Return a short log of what you changed."
    )

    result = await Runner.run(agent, task)
    print(result.final_output)

if __name__ == "__main__":
    asyncio.run(main())
